# build_quiz.py
import argparse
import base64
import json
import re
import os

def parse_qmd_to_data(qmd_path):
    """
    Parses a QMD file and extracts questions, options, and the correct answer.
    This is the same logic as before, but now it's part of the build process.
    """
    if not os.path.exists(qmd_path):
        raise FileNotFoundError(f"QMD file not found at '{qmd_path}'")

    with open(qmd_path, 'r', encoding='utf-8') as f:
        content = f.read()

    questions = []
    blocks = content.strip().split('---')

    for block in blocks:
        block = block.strip()
        if not block:
            continue

        lines = block.split('\n')
        question_text = lines[0].strip()
        options = {}
        correct_answer = None

        for line in lines[1:]:
            line = line.strip()
            match = re.match(r'^\s*(\*?)\s*([A-D])\.\s*(.*)', line, re.IGNORECASE)
            if match:
                is_correct = match.group(1) == '*'
                option_letter = match.group(2).upper()
                option_text = match.group(3).strip()

                options[option_letter] = option_text
                if is_correct:
                    if correct_answer is not None:
                        raise ValueError(f"Multiple correct answers defined for question: {question_text}")
                    correct_answer = option_letter

        if not correct_answer:
            raise ValueError(f"No correct answer defined for question: {question_text}")

        questions.append({
            "question": question_text,
            "options": options,
            "answer": correct_answer
        })
    return questions

def generate_quiz_module(qmd_path, output_py_path):
    """
    Reads QMD, converts it to a Base64 encoded JSON string,
    and writes it into a Python module.
    """
    print(f"--> Reading questions from: {qmd_path}")
    quiz_data = parse_qmd_to_data(qmd_path)

    # Convert the Python list of questions to a JSON string
    json_string = json.dumps(quiz_data)

    # Encode the JSON string into Base64 to obfuscate it
    encoded_data = base64.b64encode(json_string.encode('utf-8')).decode('utf-8')

    # Write the Python module file
    print(f"--> Generating Python module: {output_py_path}")
    with open(output_py_path, 'w', encoding='utf-8') as f:
        f.write("# This file is auto-generated by build_quiz.py. DO NOT EDIT.\n")
        f.write(f'ENCODED_DATA = "{encoded_data}"\n')

    print("âœ“ Quiz data module generated successfully.")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Build quiz data module from a QMD file.")
    parser.add_argument("--qmd", required=True, help="Path to the input QMD file.")
    parser.add_argument("--output", required=True, help="Path for the output Python module file.")

    args = parser.parse_args()
    generate_quiz_module(args.qmd, args.output)
